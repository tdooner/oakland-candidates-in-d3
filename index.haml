!!!
%html
  %head
    %title Campaign Finance in Oakland
    %meta{ name: 'viewport', content: 'width=800, user-scalable=0' }
    %meta{ charset: 'UTF-8' }
    %meta{:content => "text/html;charset=utf-8", "http-equiv" => "Content-Type"}
    %meta{:content => "utf-8", "http-equiv" => "encoding"}/
    %script{ src: 'js/d3.js', charset: 'utf-8' }
    %script{ src: 'js/fisheye.js' }
    %script{ src: 'js/jquery.js' }
    %link{ rel: 'stylesheet', type: 'text/css', href: 'style.css' }
  %body
    #title Contributors to Campaigns
    #controls
      %p
        color by:
        %select.color
          %option{ value: 'corporation' } Corporation / Individual
          %option{ value: 'oakland' } Oakland / Non-Oakland
        sort by:
        %select.sort-by
          %option{ value: 'amount' } Amount $$$$$$$
    :javascript
      var width = window.innerWidth, height = window.innerHeight
        , vis = d3.select('body').append('svg').attr('class', 'vis')
          .style({ width: width + 'px', height: height + 'px' })
        , node, max, margin = 30, max_area = 300, tooltip
        , margin_top = (width > 450) ? 120 : 20
        , margin_bottom = 50, steps_x = 100, steps_y = 28
        , color = d3.scale.category20()
        , calcBestArea = function(){
          var r1 = (width / steps_x) / 1.4
            , r2 = (height / steps_y) / 1.4
            , r = r1 < r2 ? r1 : r2
          return Math.PI * r * r
        }
        , max_area = calcBestArea()
        , areaScale = d3.scale.linear().range([0, max_area])
        , areaToRadius = function(area){ return Math.sqrt(area / Math.PI) }
        , fisheye = d3.fisheye.circular().radius(30).distortion(2)
        , colorMetric = 'oakland'
        , radius = function(d){
          // todo: connect this again
          // var metric = sortMetric
          // if(metric === 'Title' || metric === 'Union') metric = 'TCOE'
          return areaToRadius(areaScale(d['Tran_Amt1']));
        }
        , x = d3.scale.linear().domain([0, steps_x]).range([margin, width - margin])
        , y = d3.scale.linear().domain([0, steps_y]).range([margin_top, height - margin_bottom])
        , dataKey = function(d){ return d.id }
        , sortBy = function(by){ return function(a, b){ 
            if(a[by] === b[by]) return 0; else if(a[by] > b[by]) return -1;
            return 1;
        }}, money = d3.format('$,04d')
        , id = 0, order = 0
        , sortMetric = $('.sort-by').val()
        , format = function(d){
            // Name,Title,Base,OT,Other,MDV,ER,EE,DC,Misc,TCOE,,Average,
            var numKeys = ['Tran_Amt1', 'Tran_Amt2'];
            // var numStringKeys = ['Tran_NamL', 'Filer_NamL', 'Tran_City'];
            numKeys.forEach(function(key){ d[key] = Number(d[key]) })
            d.id = id++
            d.order = order++
            return d
        }, topNode = null
      if ( window.self !== window.top ){
        // we're in an iframe! oh on! hide the twitter follow button
        $('.share-left').hide()
      }
      d3.csv('data2.csv', format, function(err, rows){
        if(err) throw err
        employees = rows
        gotEmployees(employees)
        fisheyeEffect(vis)
      })
      function updateAreaScale(sortMetric){
        // var metric = sortMetric
        // if(metric === 'Title' || metric === 'Union') metric = 'TCOE'
        areaScale.domain([0, d3.max(employees, function(d){ return d['Tran_Amt1'] })])
      }
      function gotEmployees(employees){
        updateAreaScale(sortMetric)
        node = vis.selectAll('.node').data(employees, dataKey)
          .enter().append('g')
            .attr('class', 'node')
            .call(updateColor)
        node.append('circle').attr('r', radius)
        node.call(randomize).call(updatePos)//.call(sortNodesByMetric.bind(null, sortMetric))
        node.on('click', function(){
          var node // = d3.select('.node.highlighted').classed('highlighted', false).node()
            , sel = d3.select(this)
          if(sel.node() !== node) sel.classed('highlighted', !d3.select(this).classed('highlighted'))
        })
        vis.call(createTooltip)
      }
      function createTooltip(vis){
        tooltip = vis.append('g').attr('class', 'tooltip')
        tooltip.append('rect').attr({ width: 130, height: 140, rx: 5, ry: 5, class: 'bg' })
        var desc = tooltip.append('g').attr('class', 'desc')
        desc.append('text').attr('class', 'name').text('name: ').attr('transform', 'translate(5,15)')
        desc.append('text').attr('class', 'title').text('title: ').attr('transform', 'translate(5,35)')
        desc.append('text').attr('class','union').text('union: ').attr('transform', 'translate(5,55)')
        desc.append('text').attr('class','main').text('total: ').attr('transform', 'translate(5,75)')
        return tooltip
      }
      function posTooltip(node){
        if(node.empty()) return
        var d = node.datum(), text, x = d.fisheye.x, y = d.fisheye.y
        /*if(sortMetric === 'OT to Base') text = 'OT to Base' + ': '
          + d3.format('%')(d[sortMetric], 2) + ', ' + 'OT: ' + money(d.OT)
          + ' Base: ' + money(d.Tran_Amt1)
        else*/ if(sortMetric === 'Title' || sortMetric === 'oakland') text = d.Filer_NamL
        else text = sortMetric + ': ' + d.Tran_Amt2
        if(text === d.Filer_NamL || text === d.Tran_City) text = 'YTD: ' + money(d.Tran_Amt2)
        tooltip.select('.main').text(text)
        tooltip.select('.title').text(d.Filer_NamL)
        tooltip.select('.name').text(d.Tran_NamL)
        tooltip.select('.union').text('City: ' + d.Tran_City)
        var box = tooltip.select('.desc').node().getBBox()
        box.x -= 10, box.y -= 10, box.width += 20, box.height += 20
        tooltip.select('rect').attr(box)
        var offset = radius(d) * d.fisheye.z
        if( x > width / 2 ) x -= box.width + offset; else x+= offset
        if( y > height / 2 ) y -= box.height + offset; else y+= offset
        tooltip.attr('transform', 'translate(' + x + ',' + y + ')')
      }
      function updatePos(node){
        node.attr('transform', function(d){
          return 'translate(' + d.x + ',' + d.y + ')'
        })
        updateAreaScale(sortMetric)
        node.select('circle').attr('r', radius)
        return node
      }
      function updateColor(node){
        node.style('fill', function(d){ return color(d[colorMetric]) })
      }
      function setFisheyePos(node){
        node.attr('transform', function(d, i){
          return 'translate(' + d.fisheye.x + ', ' + d.fisheye.y + ')'
        })
        node.select('circle').attr('transform', function(d){
          var z = d.fisheye && d.fisheye.z || 1
          return 'scale(' + z + ')'
        })
        return node
      }
      function randomize(node){
        node.each(function(d){
          d.x = Math.random() * width
          d.y = Math.random() * height
        })
      }
      function grid(node){
        return node.data().forEach(function(d){
          d.x = x(d.order % x.domain()[1])
          d.y = y(Math.floor(d.order / x.domain()[1]))
        })
      }
      function sortNodesByMetric(metric, node){
        var data = node.data().sort(sortBy(metric))
        data.forEach(function(d, i){ d.order = i })
        node.data(data, dataKey)
        return node.call(grid).transition().duration(2000).call(updatePos)
      }
      function sortByTitle(node){
        var nest = d3.nest()
          .key(function(d){ return d.Filer_NamL })
          .sortKeys(d3.ascending)
          .sortValues(d3.ascending)
          .key(function(d){ return d.Tran_Amt2 })
          .entries(node.data())
        var data = []
        nest.forEach(function(leaf){
          leaf.values.forEach(function(leaf){ data = data.concat(leaf.values) })
        })
        data.forEach(function(d, i){ d.order = i })
        return node.data(data, dataKey).call(grid)
          .transition().duration(2000).call(updatePos)
      }
      function sortByOakland(node){
        var nest = d3.nest()
          .key(function(d){ return d.Tran_City })
          .sortKeys(d3.ascending)
          .sortValues(d3.ascending)
          .key(function(d){ return d.Tran_Amt2 })
          .entries(node.data())
        var data = []
        nest.forEach(function(leaf){
          leaf.values.forEach(function(leaf){ data = data.concat(leaf.values) })
        })
        data.forEach(function(d, i){ d.order = i })
        return node.data(data, dataKey).call(grid)
          .transition().duration(2000).call(updatePos)
      }
      // listen for sort button clicks
      $('.sort-by').on('change', function(){
        var newMetric = $(this).val()
        if(sortMetric === newMetric) return
        sortMetric = newMetric
        if(sortMetric === 'Title') sortByTitle(node)
        else if(sortMetric === 'oakland') sortByOakland(node)
        else sortNodesByMetric(sortMetric, node)
      })
      $('.color').on('change', function(){
        var newMetric = $(this).val()
        console.log("newMetric", newMetric)
        if(newMetric === colorMetric) return
        colorMetric = newMetric
        node.transition().duration(2000).call(updateColor)
      })
      $(window).resize(function(){
        width = window.innerWidth
        height = window.innerHeight
        if(width < 450) margin_top = 20
        else margin_top = 120
        vis.style({ width: width + 'px', height: height + 'px' })
        x.range([margin, width - margin])
        y.range([margin_top, height - margin_bottom])
        node.call(grid).call(updatePos)
        updateMaxArea()
        node.select('circle').attr('r', radius)
      })
      function fisheyeEffect(vis){
        return vis.on('mouseover', function(d){
          if(!node) return
          d3.select('.tooltip').style('display', 'inherit')
          //node.each(function(d, i){  $(this).removeClass('animated') })
        }).on("mousemove", function(d){
          var m = d3.mouse(this)
          fisheye.focus(m)
          if(!node) return
          node.each(function(d, i){
            var prev_z = d.fisheye && d.fisheye.z || 1
            d.fisheye = fisheye(d)
            d.fisheye.prev_z = prev_z
          })
          .filter(function(d){ return d.fisheye.z !== d.fisheye.prev_z })
          .sort(function(a, b){ return a.fisheye.z > b.fisheye.z ? 1 : -1 })
          .call(setFisheyePos)
          .call(function(node){
            var max, maxNode
            node.each(function(d){
              if( !max || d.fisheye.z > max.fisheye.z) { max = d; maxNode = this }
            })
            if(topNode !== maxNode) updateTopNode(maxNode)
          })
        }).on('mouseleave', function(d){
          d3.select('.tooltip').style('display', 'none')
          node.each(function(d, i){ d.fisheye = {x: d.x, y: d.y, z: 1} })
          .filter(function(d){ return d.fisheye.z !== d.fisheye.prev_z })
          .call(setFisheyePos)
        })
      }
      function updateMaxArea(){
        max_area = calcBestArea()
        areaScale.range([0, max_area])
      }

      function updateTopNode(maxNode){
        if(topNode) topNode.classed('active', false)
        topNode = d3.select(maxNode).classed('active', true)
        topNode.call(posTooltip)
      }
